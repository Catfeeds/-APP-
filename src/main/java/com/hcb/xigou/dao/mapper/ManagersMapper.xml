<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hcb.xigou.dao.interfaceClass.ManagersMapper" >
  <resultMap id="BaseResultMap" type="com.hcb.xigou.dto.Managers" >
    <id column="fake_id" property="fakeId" jdbcType="INTEGER" />
    <result column="manager_uuid" property="managerUuid" jdbcType="VARCHAR" />
    <result column="create_datetime" property="createDatetime" jdbcType="TIMESTAMP" />
    <result column="update_datetime" property="updateDatetime" jdbcType="TIMESTAMP" />
    <result column="delete_at" property="deleteAt" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="grade" property="grade" jdbcType="CHAR" />
    <result column="store_uuid" property="storeUuid" jdbcType="VARCHAR" />
    <result column="number" property="number" jdbcType="VARCHAR" />
    <result column="superior_uuid" property="superiorUuid" jdbcType="VARCHAR" />
    <result column="groups" property="groups" jdbcType="VARCHAR" />
    <result column="group_name" property="groupName" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.hcb.xigou.dto.Managers" extends="BaseResultMap" >
    <result column="permissions" property="permissions" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    fake_id, manager_uuid, create_datetime, update_datetime, delete_at, password, nickname, 
    grade, store_uuid, number, superior_uuid, groups, group_name
  </sql>
  <sql id="Blob_Column_List" >
    permissions
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from managers
    where fake_id = #{fakeId,jdbcType=INTEGER}
  </select>
  <!-- 根据uuid -->
  <select id="selectByManagerUuid" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from managers
    where manager_uuid = #{managerUuid,jdbcType=VARCHAR} and delete_at is null
  </select>
  <!-- 列表 -->
    <select id="selectByPaging" resultMap="BaseResultMap" parameterType="java.util.HashMap">
  	select 
  	<include refid="Base_Column_List" />
  	from managers
  	where  delete_at is null
  	<if test="groupname != null and groupname != ''">
  		and group_name like CONCAT(CONCAT('%', #{groupname,jdbcType=VARCHAR}), '%')
  	</if>
  	<if test="nickname != null and nickname != ''">
  		and nickname like CONCAT(CONCAT('%', #{nickname,jdbcType=VARCHAR}), '%')
  	</if>
    <if test="grade !='' and grade != null">
		and grade = #{grade,jdbcType=CHAR}
	 </if>
	 <if test="managerUuid !='' and managerUuid != null">
		and superior_uuid = #{managerUuid,jdbcType=VARCHAR}
	 </if>
	 <if test="number !='' and number != null">
		and number = #{number,jdbcType=VARCHAR}
	 </if>
  	order by create_datetime desc LIMIT #{start},#{end}
  </select>
  
  <select id="selectByManagersExcelport" resultMap="BaseResultMap" parameterType="java.util.HashMap">
  	select 
  	<include refid="Base_Column_List" />
  	from managers
  	where  delete_at is null
  	<if test="groupName != null and groupName != ''">
  		and group_name like CONCAT(CONCAT('%', #{groupName,jdbcType=VARCHAR}), '%')
  	</if>
  	<if test="nickname != null and nickname != ''">
  		and nickname like CONCAT(CONCAT('%', #{nickname,jdbcType=VARCHAR}), '%')
  	</if>
    <if test="grade !='' and grade != null">
		and grade = #{grade,jdbcType=CHAR}
	 </if>
	 <if test="managerUuid !='' and managerUuid != null">
		and superior_uuid = #{managerUuid,jdbcType=VARCHAR}
	 </if>
	 <if test="number !='' and number != null">
		and number = #{number,jdbcType=VARCHAR}
	 </if>
  	order by create_datetime desc 
  </select>
  
  <select id="totalCount" resultType="java.lang.Integer" parameterType="java.util.HashMap" >
  	select count(1)
  	from managers
  	where delete_at is null
  	<if test="groupname != null and groupname != ''">
  		and group_name like CONCAT(CONCAT('%', #{groupname,jdbcType=VARCHAR}), '%')
  	</if>
  	<if test="nickname != null and nickname != ''">
  		and nickname like CONCAT(CONCAT('%', #{nickname,jdbcType=VARCHAR}), '%')
  	</if>
    <if test="grade !='' and grade != null">
		and grade = #{grade,jdbcType=CHAR}
	</if>
	<if test="managerUuid !='' and managerUuid != null">
		and superior_uuid = #{managerUuid,jdbcType=VARCHAR}
	 </if>
	<if test="number !='' and number != null">
		and number = #{number,jdbcType=VARCHAR}
	 </if>
  </select>
  <!--  所有 小组-->
   <select id="selectByAll" resultType="java.util.Map" parameterType="java.util.HashMap">
  	select 
    manager_uuid,group_name
  	from managers
  	where delete_at is null and grade = '3'
  	order by create_datetime desc
  </select>

  
  <select id="selectBynicknameAndGrade" resultMap="BaseResultMap" parameterType="java.util.HashMap" >
    select 
    <include refid="Base_Column_List" />
    from managers
    where delete_at is null
    <if test="nickname !='' and nickname != null">
		and nickname =  #{nickname,jdbcType=VARCHAR}
	</if>
    <if test="password !='' and password != null">
		and password =  #{password,jdbcType=VARCHAR}
	</if>
	<if test="grade !='' and grade != null">
		and grade = #{grade,jdbcType=CHAR}
	</if>
    <if test="managerUuid !='' and managerUuid != null">
		and manager_uuid = #{managerUuid,jdbcType=VARCHAR}
	 </if>
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from managers
    where fake_id = #{fakeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hcb.xigou.dto.Managers" >
    insert into managers (fake_id, manager_uuid, create_datetime, 
      update_datetime, delete_at, password, 
      nickname, grade, store_uuid, 
      number, superior_uuid, groups, 
      group_name, permissions)
    values (#{fakeId,jdbcType=INTEGER}, #{managerUuid,jdbcType=VARCHAR}, #{createDatetime,jdbcType=TIMESTAMP}, 
      #{updateDatetime,jdbcType=TIMESTAMP}, #{deleteAt,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{nickname,jdbcType=VARCHAR}, #{grade,jdbcType=CHAR}, #{storeUuid,jdbcType=VARCHAR}, 
      #{number,jdbcType=VARCHAR}, #{superiorUuid,jdbcType=VARCHAR}, #{groups,jdbcType=VARCHAR}, 
      #{groupName,jdbcType=VARCHAR}, #{permissions,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hcb.xigou.dto.Managers" >
    insert into managers
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="fakeId != null" >
        fake_id,
      </if>
      <if test="managerUuid != null" >
        manager_uuid,
      </if>
      <if test="createDatetime != null" >
        create_datetime,
      </if>
      <if test="updateDatetime != null" >
        update_datetime,
      </if>
      <if test="deleteAt != null" >
        delete_at,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="grade != null" >
        grade,
      </if>
      <if test="storeUuid != null" >
        store_uuid,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="superiorUuid != null" >
        superior_uuid,
      </if>
      <if test="groups != null" >
        groups,
      </if>
      <if test="groupName != null" >
        group_name,
      </if>
      <if test="permissions != null" >
        permissions,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="fakeId != null" >
        #{fakeId,jdbcType=INTEGER},
      </if>
      <if test="managerUuid != null" >
        #{managerUuid,jdbcType=VARCHAR},
      </if>
      <if test="createDatetime != null" >
        #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDatetime != null" >
        #{updateDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteAt != null" >
        #{deleteAt,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="grade != null" >
        #{grade,jdbcType=CHAR},
      </if>
      <if test="storeUuid != null" >
        #{storeUuid,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        #{number,jdbcType=VARCHAR},
      </if>
      <if test="superiorUuid != null" >
        #{superiorUuid,jdbcType=VARCHAR},
      </if>
      <if test="groups != null" >
        #{groups,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null" >
        #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="permissions != null" >
        #{permissions,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hcb.xigou.dto.Managers" >
    update managers
    <set >
      <if test="managerUuid != null" >
        manager_uuid = #{managerUuid,jdbcType=VARCHAR},
      </if>
      <if test="createDatetime != null" >
        create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDatetime != null" >
        update_datetime = #{updateDatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteAt != null" >
        delete_at = #{deleteAt,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="grade != null" >
        grade = #{grade,jdbcType=CHAR},
      </if>
      <if test="storeUuid != null" >
        store_uuid = #{storeUuid,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=VARCHAR},
      </if>
      <if test="superiorUuid != null" >
        superior_uuid = #{superiorUuid,jdbcType=VARCHAR},
      </if>
      <if test="groups != null" >
        groups = #{groups,jdbcType=VARCHAR},
      </if>
      <if test="groupName != null" >
        group_name = #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="permissions != null" >
        permissions = #{permissions,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where fake_id = #{fakeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hcb.xigou.dto.Managers" >
    update managers
    set manager_uuid = #{managerUuid,jdbcType=VARCHAR},
      create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      update_datetime = #{updateDatetime,jdbcType=TIMESTAMP},
      delete_at = #{deleteAt,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      grade = #{grade,jdbcType=CHAR},
      store_uuid = #{storeUuid,jdbcType=VARCHAR},
      number = #{number,jdbcType=VARCHAR},
      superior_uuid = #{superiorUuid,jdbcType=VARCHAR},
      groups = #{groups,jdbcType=VARCHAR},
      group_name = #{groupName,jdbcType=VARCHAR},
      permissions = #{permissions,jdbcType=LONGVARCHAR}
    where fake_id = #{fakeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hcb.xigou.dto.Managers" >
    update managers
    set manager_uuid = #{managerUuid,jdbcType=VARCHAR},
      create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
      update_datetime = #{updateDatetime,jdbcType=TIMESTAMP},
      delete_at = #{deleteAt,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      grade = #{grade,jdbcType=CHAR},
      store_uuid = #{storeUuid,jdbcType=VARCHAR},
      number = #{number,jdbcType=VARCHAR},
      superior_uuid = #{superiorUuid,jdbcType=VARCHAR},
      groups = #{groups,jdbcType=VARCHAR},
      group_name = #{groupName,jdbcType=VARCHAR}
    where fake_id = #{fakeId,jdbcType=INTEGER}
  </update>
</mapper>